// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocks

import (
	database "github.com/KarnerTh/mermerd/database"
	mock "github.com/stretchr/testify/mock"
)

// Analyzer is an autogenerated mock type for the Analyzer type
type Analyzer struct {
	mock.Mock
}

// Analyze provides a mock function with given fields:
func (_m *Analyzer) Analyze() (*database.Result, error) {
	ret := _m.Called()

	var r0 *database.Result
	var r1 error
	if rf, ok := ret.Get(0).(func() (*database.Result, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *database.Result); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.Result)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetColumnsAndConstraints provides a mock function with given fields: db, selectedTables
func (_m *Analyzer) GetColumnsAndConstraints(db database.Connector, selectedTables []database.TableDetail) ([]database.TableResult, error) {
	ret := _m.Called(db, selectedTables)

	var r0 []database.TableResult
	var r1 error
	if rf, ok := ret.Get(0).(func(database.Connector, []database.TableDetail) ([]database.TableResult, error)); ok {
		return rf(db, selectedTables)
	}
	if rf, ok := ret.Get(0).(func(database.Connector, []database.TableDetail) []database.TableResult); ok {
		r0 = rf(db, selectedTables)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.TableResult)
		}
	}

	if rf, ok := ret.Get(1).(func(database.Connector, []database.TableDetail) error); ok {
		r1 = rf(db, selectedTables)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConnectionString provides a mock function with given fields:
func (_m *Analyzer) GetConnectionString() (string, error) {
	ret := _m.Called()

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSchemas provides a mock function with given fields: db
func (_m *Analyzer) GetSchemas(db database.Connector) ([]string, error) {
	ret := _m.Called(db)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(database.Connector) ([]string, error)); ok {
		return rf(db)
	}
	if rf, ok := ret.Get(0).(func(database.Connector) []string); ok {
		r0 = rf(db)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(database.Connector) error); ok {
		r1 = rf(db)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTables provides a mock function with given fields: db, selectedSchemas
func (_m *Analyzer) GetTables(db database.Connector, selectedSchemas []string) ([]database.TableDetail, error) {
	ret := _m.Called(db, selectedSchemas)

	var r0 []database.TableDetail
	var r1 error
	if rf, ok := ret.Get(0).(func(database.Connector, []string) ([]database.TableDetail, error)); ok {
		return rf(db, selectedSchemas)
	}
	if rf, ok := ret.Get(0).(func(database.Connector, []string) []database.TableDetail); ok {
		r0 = rf(db, selectedSchemas)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.TableDetail)
		}
	}

	if rf, ok := ret.Get(1).(func(database.Connector, []string) error); ok {
		r1 = rf(db, selectedSchemas)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAnalyzer creates a new instance of Analyzer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAnalyzer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Analyzer {
	mock := &Analyzer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
