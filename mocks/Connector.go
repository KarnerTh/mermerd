// Code generated by mockery v2.10.6. DO NOT EDIT.

package mocks

import (
	database "github.com/KarnerTh/mermerd/database"
	mock "github.com/stretchr/testify/mock"
)

// Connector is an autogenerated mock type for the Connector type
type Connector struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *Connector) Close() {
	_m.Called()
}

// Connect provides a mock function with given fields:
func (_m *Connector) Connect() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetColumns provides a mock function with given fields: tableName
func (_m *Connector) GetColumns(tableName string) ([]database.ColumnResult, error) {
	ret := _m.Called(tableName)

	var r0 []database.ColumnResult
	if rf, ok := ret.Get(0).(func(string) []database.ColumnResult); ok {
		r0 = rf(tableName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.ColumnResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(tableName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConstraints provides a mock function with given fields: tableName
func (_m *Connector) GetConstraints(tableName string) ([]database.ConstraintResult, error) {
	ret := _m.Called(tableName)

	var r0 []database.ConstraintResult
	if rf, ok := ret.Get(0).(func(string) []database.ConstraintResult); ok {
		r0 = rf(tableName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]database.ConstraintResult)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(tableName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDbType provides a mock function with given fields:
func (_m *Connector) GetDbType() database.DbType {
	ret := _m.Called()

	var r0 database.DbType
	if rf, ok := ret.Get(0).(func() database.DbType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(database.DbType)
	}

	return r0
}

// GetSchemas provides a mock function with given fields:
func (_m *Connector) GetSchemas() ([]string, error) {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTables provides a mock function with given fields: schemaName
func (_m *Connector) GetTables(schemaName string) ([]string, error) {
	ret := _m.Called(schemaName)

	var r0 []string
	if rf, ok := ret.Get(0).(func(string) []string); ok {
		r0 = rf(schemaName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(schemaName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
