// Code generated by mockery v2.21.4. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Questioner is an autogenerated mock type for the Questioner type
type Questioner struct {
	mock.Mock
}

// AskConnectionQuestion provides a mock function with given fields: suggestions
func (_m *Questioner) AskConnectionQuestion(suggestions []string) (string, error) {
	ret := _m.Called(suggestions)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func([]string) (string, error)); ok {
		return rf(suggestions)
	}
	if rf, ok := ret.Get(0).(func([]string) string); ok {
		r0 = rf(suggestions)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(suggestions)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AskSchemaQuestion provides a mock function with given fields: schemas
func (_m *Questioner) AskSchemaQuestion(schemas []string) ([]string, error) {
	ret := _m.Called(schemas)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func([]string) ([]string, error)); ok {
		return rf(schemas)
	}
	if rf, ok := ret.Get(0).(func([]string) []string); ok {
		r0 = rf(schemas)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(schemas)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AskTableQuestion provides a mock function with given fields: tables
func (_m *Questioner) AskTableQuestion(tables []string) ([]string, error) {
	ret := _m.Called(tables)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func([]string) ([]string, error)); ok {
		return rf(tables)
	}
	if rf, ok := ret.Get(0).(func([]string) []string); ok {
		r0 = rf(tables)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(tables)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewQuestioner interface {
	mock.TestingT
	Cleanup(func())
}

// NewQuestioner creates a new instance of Questioner. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewQuestioner(t mockConstructorTestingTNewQuestioner) *Questioner {
	mock := &Questioner{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
