// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Questioner is an autogenerated mock type for the Questioner type
type Questioner struct {
	mock.Mock
}

// AskConnectionQuestion provides a mock function with given fields: suggestions
func (_m *Questioner) AskConnectionQuestion(suggestions []string) (string, error) {
	ret := _m.Called(suggestions)

	var r0 string
	if rf, ok := ret.Get(0).(func([]string) string); ok {
		r0 = rf(suggestions)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(suggestions)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AskSchemaQuestion provides a mock function with given fields: schemas
func (_m *Questioner) AskSchemaQuestion(schemas []string) (string, error) {
	ret := _m.Called(schemas)

	var r0 string
	if rf, ok := ret.Get(0).(func([]string) string); ok {
		r0 = rf(schemas)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(schemas)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AskTableQuestion provides a mock function with given fields: tables
func (_m *Questioner) AskTableQuestion(tables []string) ([]string, error) {
	ret := _m.Called(tables)

	var r0 []string
	if rf, ok := ret.Get(0).(func([]string) []string); ok {
		r0 = rf(tables)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(tables)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
